==nTPL project: simple, fast and powerfull templates for node.js (http://github.com/donnerjack13589/nTPL).
It's easy to learn - start now!

==It's fast:
Mustache saids that running complex.html example gives following results:
	Mu -  40 secs  (benchmarks/million_complex.js)

On my PC - running nTPL's:
	nTPL - 2 secs (benchmarks/million_complex.js)

Feel the difference?

==Some features:
* nTPL have native parser written on C++, so templates are compiled very fast.
* nTPL have many optimizations in template rendering process.
* nTPL uses buffers
* nTPL is extendable (nTPL.modificators)
* nTPL can reload template on file change (watch: true)

==Installation instructions:
	curl http://github.com/donnerjack13589/nTPL/raw/master/install.sh | sh
or if it dies "Permission Denied" or EACCESS error
	curl http://github.com/donnerjack13589/nTPL/raw/master/install.sh | sudo sh
	
==Advanced instructions:	
	git clone git@github.com:donnerjack13589/nTPL.git
	cd nTPL
	make
	make install
	make test

==Basic examples:
	
	nTPL("1 + 1 = {%= 1+1 %}")();
	nTPL({
		template : "1 + 1 = {%= 1+1 %}"
	})();
	nTPL("filename.tpl")();
	// 1 + 1 = 2
	
	nTPL({
		template : "Hello {%= a %}!",
		args: ["a"]
	})({a: 'World'});
	// >> Hello World!
	
	nTPL({
		template: "Hello {%each a%}{%= this %}, {%/each%}world!",
		args: ["a"]
	})({a: ['Andy','Alex']});
	// >>  Hello Andy, Alex, World!
	
	nTPL({
		template: "{%if godmode%}My Lord!{%else%}Who are you?{%/if%}",
		args: ["godmode"]
	})({godmode: true});
	// >> My Lord!
	
	var $ = require("nTPL");
	$.parse("It also works!")();
	// >> It also works!
	
==Medium examples:

	nTPL("{%each [1,2,3] %} "{%= this %}" {%/each%}?")();
	// >> "1" "2" "3" 
	
	nTPL("{%catch var a %}What's up, dude?{%/catch%}{%= a.substr(0,9) %}?")();
	// >> What's up?
	
	nTPL({
		template: "filename.tpl",
		callback: function (tpl) {
			console.log(tpl());
		}
	});
	// Will load "filename.tpl" in async mode
	
==Harder examples:
		
	nTPL({
		template: "<button>{%= value%}</button>",
		args: ["value"],
		name: "input"
	});
	nTPL("input")({value:'Hello world!'});
	// >> Button with text "Hello world!"
	
	nTPL({
		template: "filename.tpl",
		callback: function (tpl) {
			console.log(tpl());
		},
		watch: true
	});
	// Will load "filename.tpl" in async mode
	// And watch for file changes (template will be refreshed)
	// P.S. Also available in a sync mode
		
==Block module

	require("nTPL.block");
	
	nTPL({
		template: "Hello, {%block 'username'%}{%/block%}!",
		args: [],
		name: "block-test"
	});
	nTPL("{%extends 'block-test'%}{%block 'username'%}Admin{%/block%}")();
	// >> Hello, Admin!
