/** Part of nTPL* nTPL.modificators v.0.0.1* Copyright 2010, Fedor Indutny* Released under MIT license*/#include <v8.h>#include <stdio.h>using namespace v8;namespace nTPL {		Handle<Value> equal(const Arguments& args)	{		HandleScope scope;				Local<String> str = args[0]->ToString();				int processedLen = str->Length() + 8; // $p(...,$_);		char* processed = new char[processedLen + 1];				String::Utf8Value str_(str);		char* str__ = (char*) *str_;				sprintf(processed, "$p(%s,$_);", str__);				scope.Close(String::New(processed, processedLen));	}		#define NEW_MODIFICATOR(name,func) modificators->Set( String::New(name), FunctionTemplate::New(func)->GetFunction() )	Handle<Value> addNativeModificators(const Arguments& args)	{		HandleScope scope;				if (!args[0]->IsObject)			return;				Local<Object> modificators = args[0]->ToObject();				NEW_MODIFICATOR("=",equal);	}}